package com.example.demo.Entity;

import java.util.ArrayList;
import java.util.HashSet;

import jakarta.persistence.JoinColumn;
import java.util.List;
import java.util.Set;

import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.OneToMany;

@Entity
public class User {

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int userId;
	private String username;
	private String password;
	private boolean isActive;
	private String role;
	private String email;

	@JsonIgnore
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "assignedDto", cascade = CascadeType.ALL)
	private List<Task> task = new ArrayList<>();

	@JsonIgnore
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "createdby", cascade = CascadeType.ALL)
	private List<Task> taskS = new ArrayList<>();

	@JsonIgnore
	@ManyToMany(fetch = FetchType.LAZY,cascade = CascadeType.ALL)
	@JoinTable(name = "user_project",
    joinColumns = { @JoinColumn(name = "users_id" , referencedColumnName = "userId") },
    inverseJoinColumns = { @JoinColumn(name = "projects_id", referencedColumnName = "projectId") })
	private Set<Project> projects = new HashSet<>();
	
	
	@OneToMany(cascade = CascadeType.ALL,mappedBy = "user",fetch = FetchType.LAZY)
    @JsonIgnore
	private List<TaskComments> userComment = new ArrayList<>();
	
//	 @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE})
//	    @JoinTable(name = "user_task",
//	            joinColumns = @JoinColumn(name = "user_id"),
//	            inverseJoinColumns = @JoinColumn(name = "task_id"))
//	    private List<Task> taskS;
	 
	 
	
//	@ManyToMany
//    @JoinTable(name = "user_comment",
//            joinColumns = @JoinColumn(name = "user_id"),
//            inverseJoinColumns = @JoinColumn(name = "comment_id"))
//    private Set<TaskComments> comments = new HashSet<>();
	 
	
//	@ManyToMany(mappedBy = "user")
//	  private Set<CommentUserTask> commentUserTasks = new HashSet<>();
	
//	@JsonIgnore
//	@ManyToMany(cascade = CascadeType.ALL)
//    @JoinTable(name = "user_task",
//            joinColumns = @JoinColumn(name = "user_id", referencedColumnName = "userId"),
//            inverseJoinColumns = @JoinColumn(name = "task_id", referencedColumnName = "Task_ID"))
//    private Set<Task> tasks = new HashSet<>();
	
	

//	public List<Task> getTaskS() {
//		return taskS;
//	}
//
//	public void setTaskS(List<Task> taskS) {
//		this.taskS = taskS;
//	}

//	public Set<CommentUserTask> getCommentUserTasks() {
//		return commentUserTasks;
//	}
//
//	public void setCommentUserTasks(Set<CommentUserTask> commentUserTasks) {
//		this.commentUserTasks = commentUserTasks;
//	}

//	public Set<TaskComments> getComments() {
//		return comments;
//	}
//
//	public void setComments(Set<TaskComments> comments) {
//		this.comments = comments;
//	}



	public int getUserId() {
		return userId;
	}

	public List<Task> getTaskS() {
		return taskS;
	}

	public void setTaskS(List<Task> taskS) {
		this.taskS = taskS;
	}

//	public void setTasks(Set<Task> tasks) {
//		this.tasks = tasks;
//	}

	public void setUserId(int userId) {
		this.userId = userId;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public boolean isActive() {
		return isActive;
	}

	public void setActive(boolean isActive) {
		this.isActive = isActive;
	}

	public String getRole() {
		return role;
	}

	public void setRole(String role) {
		this.role = role;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public Set<Project> getProjects() {
		return projects;
	}




	public void setProjects(Set<Project> projects) {
		this.projects = projects;
	}

	public List<Task> getTask() {
		return task;
	}

	public void setTask(List<Task> task) {
		this.task = task;
	}



//	public Set<Task> getTasks() {
//		return tasks;
//	}

	@Override
	public String toString() {
		return "User [userId=" + userId + ", username=" + username + ", password=" + password + ", isActive=" + isActive
				+ ", role=" + role + ", email=" + email + ", task=" + task + "]";
	}

}
